# -*- mode: ruby -*-
# vi: set ft=ruby :

##### box url
##### https://github.com/jose-lpa/packer-ubuntu_lts/releases/download/v2.0/ubuntu-14.04.box
#####
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "remote"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  config.vm.network "forwarded_port", guest: 22, host: 2200, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"
	config.vm.network "public_network", ip: " 10.200.10.2"
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.


   config.vm.synced_folder "./share", "/vagrant", type: "nfs"
   config.vm.hostname = "greymonster"
   config.vm.provision :shell, path: "share/setup/post_install.sh", privileged: true
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   #beginconfig.ssh.forward_agent    = true
   #config.ssh.insert_key       = false
   #config.ssh.private_key_path =  [("#{Dir.home}/.vagrant.d/insecure_private_key").gsub(File::SEPARATOR, File::ALT_SEPARATOR || File::SEPARATOR), ("#{Dir.home}/.ssh/id_rsa").gsub(File::SEPARATOR, File::ALT_SEPARATOR || File::SEPARATOR)]
   #config.vm.provision :shell, privileged: false do |s|
	#    ssh_pub_key = File.readlines("share/setup/ssh/id_rsa.pub").first.strip
     #   ssh_pri_key = File.readlines("share/setup/ssh/id_rsa").first.strip
	  #  s.inline = <<-SHELL
		#   echo #{ssh_pub_key} >> /home/$USER/.ssh/id_rsa.pub
		 #  echo #{ssh_pri_key} >> /home/$USER/.ssh/id_rsa
	#	SHELL
    #end
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "1024"
	 vb.cpus = 1
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
